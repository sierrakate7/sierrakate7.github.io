---
layout: post
title:      "Understanding Git"
date:       2018-02-28 21:56:51 +0000
permalink:  understanding_git
---


In order to get an understanding of Git and GitHub, you have to first know what a version control is. version control allows you to store multiple versions of a project you are working on, allowing you to recall particular versions later on. When you are working on projects by yourself, you can use local version control, which stores the information locally. As programmers, we will most likely be working with at least one other person, making this not effective. Some organizations even use a local sever for everyone, which allows employees to pull what files they need, but only when they are connected to the network. A distributed version control system allows all users to have a complete copy of the repository, allowing individuals to work independently of the network, along with the ability to push changes into the server and merge with the server's repository. Git is a form of the distributed version control system. Before you can get started on a big project, you need to first make a new directory on the computer. To create a new directory you need to use mkdir and after that you must go into the repository you will be working on by using the cd command combined with the name of the directory (i.e. cd Next-Big-Thing). 

By using the command ls, you can see all the files and folders in your brand-new project! You now have to transform the new directory into a Git-enabled directory, which not only allows you to keep track of all changes, but also allows you to connect with Git Hub. You simply use the git init command to do this.  This initializes a new Git repository in your new directory. If a directory has .git inside of it, it's controlled by Git. You can check the current status of your project by using git status. By using the command git add, your entire directory and non-empty directory inside of your current directory will be staged. We have to mark the changes in our code to keep track of everything and we can do this by using the git commit command. This essentially provides us with a frozen copy of our code at an exact moment. (i.e. git commit -m “adding some more information”). You can fork a GitHub repository to create your own copy of it, this allows you to make changes without doing anything to the original repository. You can fork any repo by clicking “fork.” Once we have our forked copy, we now need to make a clone. All you have to do is navigate to your forked repo on GitHub, click the “clone or download” button, and make sure you “Use SSH” as your URL type. 

